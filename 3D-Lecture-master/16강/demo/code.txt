

@@item Max Script ---------------------------------------

@@item 1. WriteVtxNormTex 함수를 호출한다.
			WriteVtxNormTex g_varSetMeshes[ i]


@@item 2. max script 텍스쳐 좌표를 저장하는 함수를 만든다.
fn WriteVtxNormTex obj = 
(
	WriteVertex obj
	WriteIndex obj
	WriteNormal obj
	WriteTVertTVFace obj
	format "TEXTURE_FILE = texture file name\n" to:Outfile
)


@@item 3. 텍스쳐 uv 좌표 버퍼와 텍스쳐 face 버퍼를 저장하는 함수를 만든다.
fn WriteTVertTVFace obj = 
(
	format "TEXTURE-VERTEX = %\n" obj.numTVerts to:Outfile
	for i=1 to obj.numTVerts do
	(
		local tex = getTvert obj i
		local uv = (ConvertToD3D_UV tex)
		format "% %\n" uv.x  uv.y to:Outfile
	)
		
	format "TEXTURE-FACE = %\n" obj.faces.count to:Outfile	
	for i=1 to obj.faces.count do
	(
		local tvfaceidx = getTVFace obj i
		local index = (ConvertToD3D_INDEX tvfaceidx)
		format "% % %\n" (index.x as integer) (index.y as integer) (index.z as integer) to:Outfile
	)
)


@@item 4. 3DMax 텍스쳐 uv 좌표를 Direct3D uv 좌표 체계로 바꾸는 함수.
-- MAX의 텍스쳐 좌표를 D3D의 uv좌표로 바꿔준다.
fn ConvertToD3D_UV max_pos =
(
	if max_pos == undefined then return undefined
	local d3d_uv = [0,0]

	d3d_uv.x = max_pos.x
	d3d_uv.y = 1.0 - max_pos.y

	d3d_uv
)



@@item C++ 어플리케이션------------------------------


@@item 5. Vertex 구조체 uv 좌표 추가.
struct Vertex
{
	Vertex() {}
	Vertex(float x0, float y0, float z0) : p(Vector3(x0, y0, z0))
		,u(-100), v(-100)
	{}
	Vector3 p;
	Vector3 n;
	float u, v;
	static const DWORD FVF;
};


@@item 6. Vertex FVF 설정.
const DWORD Vertex::FVF  = D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1;


@@item 7. Texture 좌표, Texture Face 정보를 파일로부터 읽어온다.
	string tex;
	int numTex;
	fin >> tex >> eq >> numTex;

	if (numTex > 0)
	{
		float fnum1, fnum2;
		vector<Vector3> texVertices(numTex);
		for (int i = 0; i < numTex; i++)
		{
			fin >> fnum1 >> fnum2;
			texVertices[ i] = Vector3(fnum1, fnum2, 0);
		}

		string strTexFace;
		int numTexFace;
		fin >> strTexFace >> eq >> numTexFace;

		vector<int> texFaces;
		texFaces.reserve(numTexFace*3);
		if (numTexFace > 0)
		{
			int num1, num2, num3;
			for (int i=0; i < numTexFace; ++i)
			{
				fin >> num1 >> num2 >> num3;
				texFaces.push_back( num1 );
				texFaces.push_back( num2 );
				texFaces.push_back( num3 );
			}
		}
	}


@@item 8. Vertex 정보를 동적으로 추가될 자료구조를 선언하고, 초기화한다.
		map<int, vector<int> > vtxIdxMap; // vertex index, vertex index array
		for (int i=0; i < vtxSize; ++i)
		{
			vector<int> varray;
			varray.reserve(4);
			varray.push_back(i);
			vtxIdxMap[ i] = varray;
		}


@@item 9. Vertex 에 하나이상의 uv좌표가 있을 때, 동적으로 추가한다.
		// 텍스쳐 좌표를 버텍스 버퍼에 저장한다. 
		// 버텍스 버퍼의 uv 값이 초기화 되지 않았다면, 초기화 한다.
		// 버텍스에 하나 이상의 uv값이 존재한다면, 버텍스를 추가하고, 인덱스버퍼를 수정한다.
		for (int i=0; i < (int)texFaces.size(); ++i)
		{
			const Vector3 tex = texVertices[ texFaces[ i]];
			const int vtxIdx = tempIdxBuff[ i];
			
			bool isFind = false;
			for (int k=0; k < (int)vtxIdxMap[ vtxIdx].size(); ++k)
			{
				const int subVtxIdx = vtxIdxMap[ vtxIdx][ k];

				// 텍스쳐 좌표가 버텍스 버퍼에 저장되어 있다면, index buffer 값을 해당 vertex index 로
				// 설정 한다.
				if ((-100 == tempVtxBuff[ subVtxIdx].u) &&
					(-100 == tempVtxBuff[ subVtxIdx].v))
				{
					tempVtxBuff[ subVtxIdx].u = tex.x;
					tempVtxBuff[ subVtxIdx].v = tex.y;
					isFind = true;
					break;
				}
				else if ((tex.x == tempVtxBuff[ subVtxIdx].u) && 
							(tex.y == tempVtxBuff[ subVtxIdx].v))
				{
					tempIdxBuff[ i] = subVtxIdx;
					isFind = true;
					break;
				}
			}

			// 버텍스 버퍼에 없는 uv 좌표라면, 새 버텍스를 버텍스버퍼에 추가한다.
			// 인덱스 버퍼에도 새로 추가된 버텍스 인덱스값을 넣는다.
			if (!isFind)
			{
				Vertex v = tempVtxBuff[ vtxIdx];
				v.u = tex.x;
				v.v = tex.y;
				tempVtxBuff.push_back(v);
				const int newVtxIdx = tempVtxBuff.size()-1;
				vtxIdxMap[ vtxIdx].push_back( newVtxIdx );
				tempIdxBuff[ i] = newVtxIdx;
			}
		}


@@item 10. 텍스쳐 객체를 선언한다.
IDirect3DTexture9* g_Texture1;


@@item 11. 텍스쳐를 생성한다.
D3DXCreateTextureFromFileA(g_pDevice, "../media/강소라2.jpg", &g_Texture1);


@@item 12. 텍스쳐를 출력한다.
		g_pDevice->SetTexture(0, g_Texture1);
		g_pDevice->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);
		g_pDevice->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);
		g_pDevice->SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_POINT);


@@item 13. 텍스쳐 객체를 제거한다.
	if (g_Texture1)
		g_Texture1->Release();


@@item Viewer ----------------------------------------


@@item 14. 텍스쳐 이름을 파일로 부터 읽어온다.
	// 텍스쳐 파일이름 로딩.
	string textureTok, texFilePath;
	fin >> textureTok >> eq;
	std::getline(fin, texFilePath);
	string  textureFileName = texFilePath;
	texture.Create( textureFileName);


@@item 15. filepath.h cpp 파일을 생성한다.


@@item 16. 파일명을 제외한 나머지 경로를 얻는 함수를 선언한다.
	std::string GetFilePathExceptFileName(const std::string &fileName);


@@item 17. 파일경로에 관련된 함수는 셸 라이브러리를 이용해야 한다.
#include <shlwapi.h> // 이 헤더 파일에 FilePath에 관련된 함수들이 많다. 잘 이용해보자.
#pragma comment(lib, "shlwapi")


@@item 18. GetFilePathExceptFileName 함수를 정의한다.
//------------------------------------------------------------------------
// fileName에서 파일이름과 확장자를 제외한 나머지 경로를 리턴한다.
// 마지막에 '\' 문자는 없다.
//------------------------------------------------------------------------
std::string common::GetFilePathExceptFileName(const std::string &fileName)
{
	char srcFileName[ MAX_PATH];
	strcpy_s(srcFileName, MAX_PATH, fileName.c_str() );
	PathRemoveFileSpecA( srcFileName );
	return srcFileName;
}


@@item 19. stringfunc.h cpp 를 생성한다.


@@item 20. 파일명 앞뒤로 공백이 생기는 것을 막기위한 함수를 선언한다.
	void replaceAll(std::string& str, const std::string& from, const std::string& to);
	string& trim(string &str);


@@item 21. replaceAll, trim 함수를 구현한다.
void common::replaceAll(std::string& str, const std::string& from, const std::string& to) {
	if(from.empty())
		return;
	size_t start_pos = 0;
	while((start_pos = str.find(from, start_pos)) != std::string::npos) {
		str.replace(start_pos, from.length(), to);
		start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'
	}
}


string& common::trim(string &str)
{
	for (int i=0; i < (int)str.length(); ++i)
	{
		if ((str[ i] == '\n') || (str[ i] == '\t') || (str[ i] == ' '))
			str[ i] = '$';
		else
			break;
	}

	for (int i=str.length()-1; i >= 0; --i)
	{
		if ((str[ i] == '\n') || (str[ i] == '\t') || (str[ i] == ' '))
			str[ i] = '$';
		else
			break;
	}

	replaceAll(str, "$", "");
	return str;
}


@@item 22. common.h 에 filepath.h  와 stringfunc.h 를 include 시킨다.
#include <string>
#include <map>
#include <vector>
#include <algorithm>

using std::string;
using std::wstring;
using std::vector;
using std::map;


#include "math/Math.h"
#include "etc/singleton.h"
#include "etc/filepath.h"
#include "etc/stringfunc.h"


@@item 23. 정확한 텍스쳐 파일 이름을 얻어온다.
	string  textureFileName = common::GetFilePathExceptFileName(fileName) + "\\" + trim(texFilePath);



